* My Emacs Configuration

This repository contains a personal Emacs configuration, tailored for software development, writing, and general productivity. It aims to provide a balance of modern features, performance, and ease of use, leveraging a modular structure and a curated set of packages.

* Key Features

** Package Management
   - Configured to use standard package archives: GNU ELPA and MELPA, providing access to a wide range of Emacs packages.

** UI Customizations
   - Minimalistic UI: Menu bar, tool bar, and scroll bars are disabled by default for a cleaner look.
   - Enhanced Visibility: Global line numbers and current line highlighting (`global-display-line-numbers-mode`, `global-hl-line-mode`) are enabled.
   - Parenthesis Matching: `show-paren-mode` is active for better visual matching of parentheses.
   - Splash Screen: Disabled for faster startup (`inhibit-splash-screen t`).
   - Themes: Includes a selection of popular themes like Doom themes, Modus themes, and others, managed via packages. The doom-one theme is set as the default theme for a consistent and modern look.

** Keybindings
   - `<C-return>`: Bound to `rectangle-mark-mode` for easy rectangular text selection.
   - `<f5>`: Bound to a custom function `revert-current-buffer` to reload the current file and reset its view.
   - Platform-specific enhancements:
     - *macOS*: Command key (Super) mapped for common operations like copy (`Cmd-c`), paste (`Cmd-v`), save (`Cmd-s`), etc.
     - *Windows*: Left Windows key mapped to Super, and Menu/App key to Hyper.

** Modular Design
   - The configuration is broken down into multiple files, typically prefixed with `init-` (e.g., `init-base.el`, `init-ui.el`, `init-org.el`), located in the `lisp/` directory. Each file handles a specific aspect of the setup (e.g., base editing, UI, Org mode).
   - This modular approach makes it easier to manage and customize different parts of the configuration.

** Notable Packages
   - *Completion*: Utilizes a modern completion setup with `Vertico` (vertical completion), `Corfu` (in-buffer completion), `Marginalia` (annotations), `Orderless` (flexible filtering), and `Embark` (contextual actions).
   - *Org Mode*: Highly customized Org mode experience with packages like `org-modern` for improved aesthetics, `org-roam-ui` for knowledge management, `org-download` for easy image embedding, and `toc-org` for table of contents.
   - *Project & File Management*: `Projectile` for project interaction, integrated with `Treemacs` for a file explorer sidebar, enhanced with icons (`treemacs-nerd-icons`, `all-the-icons`).
   - *Version Control*: Seamless Git integration, likely through `Magit` (implied by `treemacs-magit` and `mgit`).
   - *Editing Enhancements*: `multiple-cursors` and `iedit` for simultaneous multi-point editing, `expand-region` for semantic selection expansion, `smartparens` for balanced parentheses, and `YASnippet` for code snippets.
   - *LSP & Syntax*: `Eglot` for Language Server Protocol support and `treesit-auto` for leveraging tree-sitter parsing.
   - *Themes & Appearance*: `doom-themes`, `modus-themes`, `doom-modeline` for a rich visual experience.
   - *Utility*: `which-key` for displaying available keybindings, `exec-path-from-shell` to ensure Emacs inherits the shell environment's PATH.

* Configuration Structure

This Emacs configuration is organized to be modular and maintainable.

** Core Initialization Files
   - =early-init.el=: This file is loaded very early in the Emacs startup sequence. It's used for settings that must be applied before the package system is initialized, such as customizing `package-archives` or basic UI behavior to speed up startup.
   - =init.el=: This is the main entry point for the configuration. It sets up fundamental behaviors, loads helper files from the `lisp/` directory, and manages package loading and customization. Utility functions have been moved to `init-funcs.el` for better organization.

** Key Directories
   - =lisp/=: Contains the core custom Emacs Lisp files that make up this configuration. These are typically modular files (e.g., `init-ui.el`, `init-org.el`) that handle specific features or modes, and are loaded by `init.el`.
   - =site-lisp/=: This directory is intended for third-party Lisp packages that are not installed via ELPA/MELPA, or for larger, self-contained custom modules. For example, it might contain manually downloaded packages or significant personal customizations like `nano-emacs`.
   - =snippets/=: Houses code snippets for various editing modes, primarily used by the YASnippet package. Snippets are organized in subdirectories by mode (e.g., `org-mode`, `python-mode`).
   - =transient/=: Contains files generated by packages, such as history files for the `transient` package (used by Magit and others). This is typically not manually edited.

* Installation

** Prerequisites
   - *Emacs*: Version 28.1 or later is recommended for best compatibility with all features and packages used in this configuration.
   - *Git*: Required for cloning the repository.
   - *Shell Environment*: Ensure that your shell environment (especially `PATH`) is correctly configured, as some packages (e.g., for LSP or linters) may rely on external tools. Launching Emacs from such a shell is advisable.
   - *Internet Connection*: Needed for downloading packages during the first startup.

** Steps
   1. *Backup your existing Emacs configuration* (if any):
      It's wise to backup your current `~/.emacs.d` or `~/.config/emacs` directory before proceeding:
      #+BEGIN_SRC bash
      # Example:
      # mv ~/.emacs.d ~/.emacs.d.bak
      # or
      # mv ~/.config/emacs ~/.config/emacs.bak 
      #+END_SRC

   2. *Clone the repository*:
      Clone this repository to the standard Emacs configuration directory (`~/.emacs.d` or `~/.config/emacs` depending on your Emacs version and preference. `~/.emacs.d` is the most common default).
      #+BEGIN_SRC bash
      git clone this repository's URL ~/.emacs.d 
      #+END_SRC
      (Replace `this repository's URL` with the actual URL of this Git repository. If the README is already in the repo, you can use a relative path or a placeholder like "this repository's URL".)
      *Note*: If you prefer to use `~/.config/emacs`, clone into that directory instead.

   3. *Start Emacs*:
      Launch Emacs. On the first start, it will automatically begin downloading and installing `use-package` and then all the other required packages listed in the configuration. This process might take a few minutes, depending on your internet connection and the number of packages.
      Monitor the messages in the `*Messages*` buffer for progress or any errors.

   4. *Restart Emacs (Recommended)*:
      After all packages are installed, it's often a good idea to restart Emacs to ensure all components are loaded correctly.

   5. *Install necessary external tools (if any)*:
      Some packages, particularly those for programming language support (LSP servers, linters, formatters via `apheleia`), may require external tools or language runtimes to be installed on your system. For example:
      - If you use `eglot` for Python, you'd need a Python interpreter and a Python LSP server (like `pylsp` or `pyright`).
      - For `rust-mode` and Eglot, you'd need `rust-analyzer`.
      Consult the documentation of specific packages (like Eglot, Apheleia) or modes you intend to use for their external dependencies.

* Customization

This configuration is designed to be a foundation that you can tailor to your specific needs. Here are some ways to customize it:

**1. User-specific Settings (`lisp/init-custom.el`)**
   - The file `lisp/init-custom.el` is specifically provided for your personal customizations. It is loaded by `init.el`.
   - You can place your `custom-set-variables` and `custom-set-faces` (often generated by Emacs' M-x customize interface) in this file to keep them separate from the main configuration, which makes updating the core configuration easier.
   - Add personal keybindings, simple hooks, or minor adjustments here.
   - Example:
     #+BEGIN_SRC emacs-lisp
     ;; In lisp/init-custom.el
     (setq-default indent-tabs-mode nil) ; Ensure spaces, not tabs
     (setq some-package-variable t)

     (custom-set-variables
      '(my-favorite-color "blue"))
     #+END_SRC

**2. Managing Packages**
   - *Adding new packages*: The recommended way is to use `use-package` declarations in your `lisp/init-custom.el`.
     #+BEGIN_SRC emacs-lisp
     ;; In lisp/init-custom.el
     (use-package my-new-package
       :ensure t
       :defer t ; or :after some-other-package, or :commands my-command
       :init
       (message "Setting up my-new-package")
       :config
       (setq my-new-package-option t)
       (define-key my-new-package-map (kbd "C-c n") #'my-new-package-command))
     #+END_SRC
   - *Modifying existing package configurations*: You can customize packages loaded in other `lisp/*.el` files by adding `use-package` `:custom`, `:config`, or `:bind` sections in `lisp/init-custom.el`. Make sure `lisp/init-custom.el` is loaded late enough or your settings might be overridden. The current setup loads `init-custom.el` fairly early. For deeper overrides, you might need to adjust load order or use advice.
   - *Removing packages*: While you could remove packages from the `package-selected-packages` list in `init.el`, this might lead to merge conflicts when updating the configuration. A less intrusive way is to "disable" a `use-package` declaration by advising its `:config` or `:init` to do nothing, or by setting its `:demand` or `:disabled` keywords if using a version of `use-package` that supports them directly in `init-custom.el`. This is more advanced. For packages you truly don't want, consider forking the configuration.

**3. Themes**
   - Several themes are included (see "Notable Packages"). You can switch themes using `M-x load-theme`.
   - To set a theme permanently, add `(load-theme 'theme-name t)` to your `lisp/init-custom.el`. Example:
     #+BEGIN_SRC emacs-lisp
     ;; In lisp/init-custom.el
     (load-theme 'modus-vivendi t)
     #+END_SRC

**4. Creating New Configuration Files**
   - For larger, personal modules, you can create your own `my-feature.el` file in the `lisp/` directory (or a personal subdirectory) and `require` it from `lisp/init-custom.el`.

**A Note on Updates:**
If you plan to pull updates from the original repository, making your customizations in `lisp/init-custom.el` or in separate, self-contained files will minimize merge conflicts. Avoid directly modifying the core `init-*.el` files from the repository as much as possible if you intend to stay in sync.

* Contributing (Optional)

[Notes on how to contribute if applicable]
