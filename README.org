#+TITLE: My Emacs Configuration

This is an auto-generated README for my Emacs setup.

* Introduction

This Emacs configuration is designed to be a modern, efficient, and highly customized development environment. It's built around a modular structure, with different aspects of the configuration separated into their own files. This makes it easy to manage and extend the setup.

The configuration uses `use-package` for package management, which simplifies the process of installing, configuring, and loading packages.

* Key Features

- **Modern Completion:** A powerful completion setup using Vertico, Corfu, Consult, and Orderless.
- **LSP Integration:** Eglot is used for Language Server Protocol (LSP) support, providing features like code completion, navigation, and diagnostics for various languages.
- **Comprehensive Org Mode:** An extensive Org mode setup with `org-roam` for knowledge management, `org-modern` for a clean and modern look, and a variety of other packages to enhance functionality.
- **Project Management:** Projectile and Treemacs are used for efficient project management and file browsing.
- **Customizable UI:** The UI is highly customizable, with support for multiple themes (Doom, Ef, Modus) and a clean, minimalist modeline powered by Doom Modeline.

* Structure

The configuration is organized into the following files:

- `init.el`: The main entry point for the configuration. It loads all the other configuration files.
- `early-init.el`: Contains early initialization settings that are applied before the main `init.el` file is loaded.
- `custom.el`: Stores variables configured via the Emacs customization UI.
- `lisp/`: This directory contains the modular configuration files, each responsible for a specific aspect of the setup:
  - `init-const.el`: Defines constants used throughout the configuration.
  - `init-custom.el`: Contains custom variables and settings.
  - `init-funcs.el`: Defines custom utility functions.
  - `init-org.el`: Contains the core Org mode configuration.
  - `init-package.el`: Initializes the package system and `use-package`.
  - `init-rust.el`: Configures Rust development tools.
  - `setup-ai.el`: Configures AI-related packages.
  - `setup-completion.el`: Sets up the completion frameworks.
  - `setup-core.el`: Configures core Emacs functionality.
  - `setup-editing.el`: Configures text editing enhancements.
  - `setup-misc.el`: Contains miscellaneous settings and packages.
  - `setup-org.el`: Contains the main Org mode configuration.
  - `setup-programming.el`: Configures programming language support.
  - `setup-project.el`: Configures project management tools.
  - `setup-ui.el`: Configures the user interface, themes, and modeline.

* Key Packages

Here are some of the key packages used in this configuration:

**Core & UI**
- `all-the-icons`: Provides a wide range of icons for use in Emacs.
- `doom-modeline`: A modern and customizable modeline.
- `doom-themes`: A collection of themes for Emacs.
- `ef-themes`: A collection of light and dark themes.
- `modus-themes`: A pair of highly accessible themes.
- `nerd-icons`: Provides Nerd Font icons for Emacs.

**Completion**
- `vertico`: A vertical completion UI.
- `corfu`: A completion UI that displays candidates in a popup.
- `consult`: A set of commands for searching and navigation.
- `orderless`: A completion style that allows you to enter search terms in any order.

**Editing**
- `avy`: A package for jumping to visible text.
- `expand-region`: A package for expanding the selected region.
- `multiple-cursors`: A package for using multiple cursors.
- `smartparens`: A package for working with balanced expressions.
- `yasnippet`: A template system for Emacs.

**Programming**
- `apheleia`: A package for running code formatters.
- `eglot`: A client for the Language Server Protocol (LSP).
- `flymake`: A modern syntax checking framework.
- `magit`: A Git interface for Emacs.
- `quickrun`: A package for running code snippets.
- `rust-mode`: A major mode for editing Rust code.
- `tree-sitter`: A parser generator tool and an incremental parsing library.

**Org Mode**
- `org-roam`: A knowledge management system for Org mode.
- `org-roam-ui`: A web-based UI for `org-roam`.
- `org-modern`: A package for a modern and clean look for Org mode.
- `toc-org`: A package for generating a table of contents for Org files.

**Project Management**
- `projectile`: A project interaction library for Emacs.
- `treemacs`: A tree-style file explorer.