;;; init-org.el -*- lexical-binding: t; -*-
(eval-when-compile
  (require 'init-custom))

;;============ org-mode ===============
(use-package org-fancy-priorities
  :diminish
  :hook (org-mode . org-fancy-priorities-mode)
  :config
  (setq org-fancy-priorities-list
        '("üÖ∞" "üÖ±" "üÖ≤" "üÖ≥" "üÖ¥")))

;;(use-package org-superstar)

;; Babel
(setq org-confirm-babel-evaluate nil
      org-src-fontify-natively t
      org-src-tab-acts-natively t)

(defconst load-language-alist
  '((emacs-lisp . t)
   ;; (perl       . t)
    (python     . t)
   ;; (rust       . t)
    (js         . t)
    (css        . t)
   ;; ÈúÄË¶Å‰ΩøÁî® conf (properties . t)
   ;;  ÈúÄË¶Å‰ΩøÁî® js-json (json       . t)
    (java       . t)
    (shell      . t)
    (plantuml   . t))
  "Alist of org ob languages.")

;; Table of contents
(use-package toc-org
  :hook (org-mode . toc-org-mode))

(use-package org-download
  :ensure t
  :commands (org-download-yank org-download-clipboard org-download-screenshot org-download-file org-download-enable)
  :custom
  (org-download-display-inline-images 'posframe)
  (org-download-method 'attach)
  ;; not workÔºåuse custom.el config
  (org-download-image-dir (expand-file-name "img/" (file-truename centaur-org-directory)))
  (org-download-heading-lvl nil)
  (org-download-image-attr-list
   '("#+ATTR_HTML: :width 65% :align center"))
  :config
  (add-hook 'dired-mode-hook #'org-download-enable)
  )

(setq inbox-dir (expand-file-name "INBOX.org" centaur-org-directory))
(setq todo-dir (expand-file-name "TODOs.org" centaur-org-directory))
(setq book-dir (expand-file-name "TODOs.org" centaur-org-directory))


;;============ org ===============
(use-package org
  ;; (add-hook! 'dired-mode-hook #'org-download-enable)
  ;; org src block use  =c-c '=  show line number
  ;; (add-hook! 'org-src-mode-hook #'menu-bar--display-line-numbers-mode-relative)
  ;; (add-hook! 'org-mode-hook #'org-icons)
;;  :hook ('org-mode-hook . org-tempo-mode)
;;  (add-hook! 'org-mode-hook #'org-superstar-mode)
  :ensure t
  :init
  (setq
   org-startup-with-inline-images t
   org-hierarchical-todo- t
   ;; org mode ÈªòËÆ§Â±ïÁ§∫Â±ÇÁ∫ß
   ;;org-startup-folded 'show2levels
   ;; from https://emacs-china.org/t/org-startup-show2levels/16499
   org-startup-with-inline-images t
   org-todo-keywords
   '((sequence "TODO(t)" "PROJ(p)" "NEXT(n)" " WAIT(w)" "FIXME(f)" "|" "DONE(d!)" "CANCELLED(c!)")
     (sequence "[ ](T)" "[-](S)" "[?](W)" "|" "[X](D)")
     )
   org-statisticstodo-keyword-faces '(
                                      ("NEXT" . (doom-color 'green))
                                      ("FIXME" . (doom-color 'green))
                                      ("TODO" . (doom-color 'yellow))
                                      ("PROJ" . (doom-color 'yellow))
                                      ("WAIT" . (doom-color 'teal))
                                      ("MAYBE" . (doom-color 'base5))
                                      ("[ ]" . (doom-color 'green))
                                      ("[-]" . (doom-color 'yellow))
                                      ("[?]" . (doom-color 'red)))
   )
  :config
  (setq org-capture-templates nil)
  (add-to-list 'org-capture-templates
               '("i" "INBOX" entry
                 (file+headline inbox-dir "REFILE")
                 "\n* TODO %^{ÂÜÖÂÆπ}\n%u\n"))

  (add-to-list 'org-capture-templates '("t" "Tasks"))
  (add-to-list 'org-capture-templates
               '("tw" "Work Task" entry
                 (file+headline todo-dir "Work")
                 "\n* TODO %^{‰ªªÂä°Âêç} :work: \n%u"))
  (add-to-list 'org-capture-templates
               '("tp" "Personal Task" entry
                 (file+headline todo-dir "Personal")
                 "\n* TODO %^{‰ªªÂä°Âêç} :personal: \n%u\n"))
  (setq org-agenda-files (list
                          (expand-file-name "TODOs.org" centaur-org-directory)
                          (expand-file-name "INBOX.org" centaur-org-directory)
                          (expand-file-name "ARCHIVED.org" centaur-org-directory)
                          (expand-file-name "daily" centaur-org-directory)
                          ))
  (setq org-refile-targets '((org-agenda-files :maxlevel . 4) ; Êâ´Êèè agenda Êñá‰ª∂‰∏≠ÁöÑÊ†áÈ¢òÔºåÊúÄÊ∑±4Á∫ß
                           (nil :maxlevel . 3)))          ; ‰πüÂÖÅËÆ∏ÂΩíÊ°£Âà∞ÂΩìÂâçÊñá‰ª∂ÁöÑÊ†áÈ¢ò
 ;;  (setq org-agenda-files (list centaur-org-directory))
  (setq org-agenda-skip-scheduled-if-done t)
  (setq org-agenda-skip-deadline-if-done t)
  (setq org-agenda-include-deadlines t)
  (setq org-agenda-include-diary t)
  (setq org-agenda-block-separator nil)
  (setq org-agenda-compact-blocks t)
  (setq org-agenda-start-with-log-mode t)
  (setq org-agenda-log-mode-items '(closed clock state))
  (setq org-agenda-use-time-grid t)
  ;; (add-hook 'org-agenda-mode-hook '(lambda() (hl-line-mode 1)))

  (setq org-todo-state-tags-triggers
        (quote (("CANCELLED" ("CANCELLED" . t))
                ("WAITING" ("WAITING" . t))
                (done ("WAITING"))
                ("TODO" ("WAITING") ("CANCELLED"))
                ("NEXT" ("WAITING") ("CANCELLED"))
                ("DONE" ("WAITING") ("CANCELLED"))
                )))

  (setq
   org-agenda-prefix-format '((agenda    . "  %i %-12:c%?-12t% s ")
                              (timeline  . "  %-6t %6e ")
                              (todo      . "  %-6t %6e ")
                              (tags      . "  %i %-12:c ")
                              (search    . "%l")
                              )
   org-agenda-tags-column 80
   ;; org-agenda-start-on-weekday 1 ; ‰ªé‰ªäÂ§©ÂºÄÂßã
   org-agenda-include-deadlines t
   org-agenda-block-separator nil
   org-agenda-compact-blocks t
   org-agenda-breadcrumbs-separator " ‚ù± "
   org-agenda-current-time-string "ÓÄÉ ‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà now"
   org-agenda-sorting-strategy
   '((agenda habit-down time-up effort-up priority-down category-keep)
     (todo   priority-up effort-up todo-state-up category-keep)
     (tags   priority-down category-keep)
     (search category-keep))
   )
  ;; Prettify time grid
  (setq org-agenda-time-grid (quote ((daily today require-timed)
                                     (300
                                      600
                                      900
                                      1200
                                      1500
                                      1800
                                      2100
                                      2400)
                                     "......"
                                     "-----------------------------------------------------"
                                     )))
  (org-babel-do-load-languages 'org-babel-load-languages load-language-alist)
  :hook (((org-babel-after-execute org-mode) . org-redisplay-inline-images) ; display image
         (org-indent-mode . (lambda()
                              (diminish 'org-indent-mode)
                              ;; HACK: Prevent text moving around while using brackets
                              ;; @see https://github.com/seagle0128/.emacs.d/issues/88
                              (make-variable-buffer-local 'show-paren-mode)
                              (setq show-paren-mode nil))))
  :bind (
         ("C-c [" . org-mark-ring-goto)
         ("C-c o a" . org-agenda))
  )

;;============ org-roam ===============
;; org-roam Áõ∏ÂÖ≥
(use-package org-roam
  :ensure t
  :after org
  :commands
  (org-roam-mode
   ;; org-roam-buffer
   ;; org-roam-setup
   org-roam-capture
   org-roam-node-find)
  :config
  ;;(org-roam-db-autosync-enable)
  (org-roam-setup)
  ;;(setq org-ioam-mode-sections
  ;;      (list #'org-roam-backlinks-insert-section
  ;;            #'org-roam-reflinks-insert-section
  ;;            #'org-roam-unlinked-references-insert-section))
  :bind (("C-c o l" . org-roam-buffer-toggle)
         ("C-c o f" . org-roam-node-find)
         ("C-c o g" . org-roam-graph)
         ("C-c o i" . org-roam-node-insert)
         ("C-c o c" . org-roam-capture)
         ("C-c o j" . org-roam-dailies-capture-today)
         ("C-c o t" . org-roam-dailies-goto-today)
         )
  :config
  (setq org-roam-capture-templates
        '(
          ("d" "default" plain "%?"
           :target (file+head "${slug}-%<%Y%m%d%H>.org"
                              "#+title:${title}\n#+filetags:\n\n")
           :unnarrowed t)

          ("p" "Persional Note" plain "%?"
           :target (file+head "note/${slug}-%<%Y%m%d%H%M%S>.org"
                              "#+title:${title}\n#+filetags: :note:\n\n")
           :unnarrowed t)

          ("w" "Work Document" plain "%?"
           :target (file+head "work/${slug}-%<%Y%m%d%H%M%S>.org"
                              "#+title:${title}\n#+filetags: :work:\n\n")
           :unnarrowed t)

          ("l" "LeetCode")
          ("la" "Arrays" entry "\n** ${title} \n:PROPERTIES:\n:ID: %(org-id-new)\n:END:\n*** Reference\n%^{reference}\n*** Questtion\n \n*** Solution \n "
           :target (file+olp "Leetcode.org" ("Arrays"))
           :unnarrowed t)
          ("ll" "List" entry "\n** ${title} \n:PROPERTIES:\n:ID: %(org-id-new)\n:END:\n*** Reference\n%^{reference}\n*** Questtion\n \n*** Solution \n "
           :target (file+olp "Leetcode.org" ("List"))
           :unnarrowed t)
          )
        )
  (setq org-roam-capture-ref-templates
        '(
          ("a" "Annotation" plain
           "%U ${body}\n"
           :target (file+head "reference/${slug}.org" "#+title: ${title}\n#+roam_ref: ${ref}\n#+filetags:\n\n")
           ;; :immediate-finish t
           :unnarrowed t
           )
          ("r" "ref"
           entry
           "* TODO %<%I:%M %p>: %:annotation :Bookmark: \n SCHEDULED: %T \n  "
           :target (file+olp (format "%s/%s" "INBOX.org") ("Bookmarks"))
           :immediate-finish t)
          ))
  (setq org-roam-completion-everywhere t)
   (setq org-roam-node-display-template
        (concat "${title:*} "
                (propertize "${tags:10}" 'face 'org-tag)
                ))


  (defun my-doom-modeline-roam-aware-buffer-file-name (orig-fun &rest args)
  "Display Org Roam filenames: 'YYYY-MM-DD' for dailies, and 'Ôâ¥ Title (YYYY-MM-DD)' or 'Ôâ¥ (YYYY-MM-DD) Title' for others."
  ;; Âü∫Êú¨Êù°‰ª∂Ê£ÄÊü•ÔºöÊòØÂê¶‰∏∫ Org Roam ÁõÆÂΩï‰∏ãÁöÑ .org Êñá‰ª∂
  (if (and (boundp 'org-roam-directory)
           org-roam-directory
           (stringp buffer-file-name)
           (require 's nil 'noerror) ; Á°Æ‰øù s.el Â≠óÁ¨¶‰∏≤Â§ÑÁêÜÂ∫ìÂèØÁî®
           ;; ‰ΩøÁî® file-truename Â§ÑÁêÜÁ¨¶Âè∑ÈìæÊé•Á≠âÊÉÖÂÜµÔºåÁ°Æ‰øùË∑ØÂæÑÊØîËæÉÁöÑÂáÜÁ°ÆÊÄß
           (s-starts-with-p (file-truename org-roam-directory) (file-truename buffer-file-name))
           (s-ends-with-p ".org" buffer-file-name t)) ; t Ë°®Á§∫ÂøΩÁï•ÂêéÁºÄÁöÑÂ§ßÂ∞èÂÜô

      ;; ÊèêÂèñÊñá‰ª∂ÂêçÔºà‰∏çÂê´Ë∑ØÂæÑÂíåÂêéÁºÄÔºâÔºåÂπ∂Â∞Ü‰∏ãÂàíÁ∫øÊõøÊç¢‰∏∫Á©∫Ê†º
      (let* ((filename (file-name-nondirectory buffer-file-name))
             (name-part (file-name-sans-extension filename))
             (name-part-spaced (subst-char-in-string ?_ ?\s name-part))
             (icon " Ôâ¥") ; ÂÆö‰πâÂõæÊ†áÔºåÊñπ‰æøÂ§çÁî®
             (display-string nil)) ; Áî®‰∫éÂ≠òÂÇ®ÊúÄÁªàÊòæÁ§∫ÁöÑÂ≠óÁ¨¶‰∏≤

        (cond
         ;; ---------------------------------------------------------------------
         ;; Ê®°Âºè1: "Êó•Âøó" Êñá‰ª∂ (Á∫ØÊó•ÊúüÊñá‰ª∂ÂêçÔºåÂ¶Ç "2023-01-01" Êàñ "20230101")
         ;; ÊúüÊúõËæìÂá∫: "2023-01-01" (‰∏çÂ∏¶ÂõæÊ†á)
         ;; ---------------------------------------------------------------------
         ((string-match "^\\([0-9]\\{4\\}\\)[-_]?\\([0-9]\\{2\\}\\)[-_]?\\([0-9]\\{2\\}\\)$" name-part-spaced)
          (let ((year (match-string 1 name-part-spaced))
                (month (match-string 2 name-part-spaced))
                (day (match-string 3 name-part-spaced)))
            ;; ÂèØÈÄâ: Â¶ÇÊûúÂ∏åÊúõÊó•ÂøóÊñá‰ª∂ÂøÖÈ°ªÂú®ÁâπÂÆöÁöÑ "daily/" Â≠êÁõÆÂΩï‰∏ãÔºåÂèØ‰ª•Âú®ËøôÈáåÊ∑ªÂä†Ê£ÄÊü•
            ;; (if (s-contains-p "/daily/" buffer-file-name t) ... )
            (setq display-string (format "%s%s-%s-%s" icon year month day))))

         ;; ---------------------------------------------------------------------
         ;; Ê®°Âºè2: "ÂÖ∂‰ªñÊñá‰ª∂" - Ê†áÈ¢òÂú®ÂâçÔºåÊó•Êúü/Êó∂Èó¥Êà≥Âú®Âêé (Â¶Ç "ÊàëÁöÑÁ¨îËÆ∞-20230101120000")
         ;; ÊúüÊúõËæìÂá∫: "Ôâ¥ ÊàëÁöÑÁ¨îËÆ∞ (2023-01-01)"
         ;; ---------------------------------------------------------------------
         ((string-match "^\\(.*\\)-\\([0-9]\\{4\\}\\)\\([0-9]\\{2\\}\\)\\([0-9]\\{2\\}\\)[0-9]*$" name-part-spaced)
          (let ((title-part (s-trim (match-string 1 name-part-spaced))) ; ÊçïËé∑Ê†áÈ¢òÂπ∂ÂéªÈô§È¶ñÂ∞æÁ©∫Ê†º
                (year  (match-string 2 name-part-spaced))
                (month (match-string 3 name-part-spaced))
                (day   (match-string 4 name-part-spaced)))
            (if (not (s-blank? title-part)) ; Á°Æ‰øùÊ†áÈ¢òÈÉ®ÂàÜ‰∏ç‰∏∫Á©∫
                (setq display-string (format "%s(%s%s-%s-%s)" title-part icon year month day)))))

         ;; ---------------------------------------------------------------------
         ;; Ê®°Âºè3: "ÂÖ∂‰ªñÊñá‰ª∂" - Êó•Êúü/Êó∂Èó¥Êà≥Âú®ÂâçÔºåÊ†áÈ¢òÂú®Âêé (Â¶Ç "20230101120000-ÊàëÁöÑÁ¨îËÆ∞")
         ;; ÊúüÊúõËæìÂá∫: "Ôâ¥ (2023-01-01) ÊàëÁöÑÁ¨îËÆ∞"
         ;; ---------------------------------------------------------------------
         ((string-match "^\\([0-9]\\{4\\}\\)\\([0-9]\\{2\\}\\)\\([0-9]\\{2\\}\\)[0-9]*-\\(.*\\)$" name-part-spaced)
          (let ((year (match-string 1 name-part-spaced))
                (month (match-string 2 name-part-spaced))
                (day (match-string 3 name-part-spaced))
                (title-part (s-trim (match-string 4 name-part-spaced))))
            (if (not (s-blank? title-part)) ; Â¶ÇÊûúÊúâÊ†áÈ¢òÈÉ®ÂàÜ
                (setq display-string (format "%s(%s-%s-%s) %s" icon year month day title-part))
              ;; Â¶ÇÊûúÊ†áÈ¢òÈÉ®ÂàÜ‰∏∫Á©∫ (‰æãÂ¶ÇÊñá‰ª∂ÂêçÊòØ "202301011200-")Ôºå‰πüÊòæÁ§∫Â∏¶ÂõæÊ†áÁöÑÊó•Êúü
              (setq display-string (format "%s(%s-%s-%s)" icon year month day))))))
        ;; --- End of cond ---

        ;; Â¶ÇÊûú‰ª•‰∏ä‰ªª‰ΩïËá™ÂÆö‰πâÊ†ºÂºèËßÑÂàôÂåπÈÖçÊàêÂäüÔºåÂàô‰ΩøÁî® display-string
        (if display-string
            display-string
          ;; Â¶ÇÊûúÊâÄÊúâËá™ÂÆö‰πâËßÑÂàôÈÉΩÊú™ÂåπÈÖçÔºåÂàôË∞ÉÁî®ÂéüÂßãÂáΩÊï∞Â§ÑÁêÜ„ÄÇ
          ;; ËøôÁ°Æ‰øù‰∫ÜÂ¶ÇÊûúÊñá‰ª∂Âêç‰∏çÁ¨¶Âêà‰∏äËø∞‰ªª‰Ωï‰∏ÄÁßç Roam ÁâπÂÆöÊ†ºÂºèÔºå
          ;; ÊàñËÄÖÊÇ®Â∏åÊúõÂéüÂßãÂáΩÊï∞ÊúâÂÖ∂‰ªñÂ§ÑÁêÜÈÄªËæëÔºåÂÆÉ‰ªçÁÑ∂‰ºöË¢´ÊâßË°å„ÄÇ
          (apply orig-fun args)))

    ;; Â¶ÇÊûú‰∏çÊòØ Org Roam ÁõÆÂΩï‰∏ãÁöÑ .org Êñá‰ª∂ÔºåÂàôÁõ¥Êé•Ë∞ÉÁî®ÂéüÂßãÂáΩÊï∞
    (apply orig-fun args)))

  ;;(advice-add 'some-doom-modeline-function-that-displays-filename :around #'my-doom-modeline-roam-aware-buffer-file-name)

  (with-eval-after-load 'doom-modeline
    (advice-add 'doom-modeline-buffer-file-name
                :around #'my-doom-modeline-roam-aware-buffer-file-name))

  ;; org-return - from https://github.com/zilongshanren/.emacs.d/blob/eglot/lisp/init-org.el
  (defun zilong/org-return (&optional indent)
      "Goto next table row or insert a newline.
Calls `org-table-next-row' or `newline', depending on context.
When optional INDENT argument is non-nil, call
`newline-and-indent' instead of `newline'.
When `org-return-follows-link' is non-nil and point is on
a timestamp or a link, call `org-open-at-point'.  However, it
will not happen if point is in a table or on a \"dead\"
object (e.g., within a comment).  In these case, you need to use
`org-open-at-point' directly."
      (interactive)
      (let ((context (if org-return-follows-link (org-element-context)
                       (org-element-at-point))))
        (cond
         ;; In a table, call `org-table-next-row'.  However, before first
         ;; column or after last one, split the table.
         ((or (and (eq 'table (org-element-type context))
                   (not (eq 'table.el (org-element-property :type context)))
                   (>= (point) (org-element-property :contents-begin context))
                   (< (point) (org-element-property :contents-end context)))
              (org-element-lineage context '(table-row table-cell) t))
          (if (or (looking-at-p "[ \t]*$")
                  (save-excursion (skip-chars-backward " \t") (bolp)))
              (insert "\n")
            (org-table-justify-field-maybe)
            (call-interactively #'org-table-next-row)))
         ;; On a link or a timestamp, call `org-open-at-point' if
         ;; `org-return-follows-link' allows it.  Tolerate fuzzy
         ;; locations, e.g., in a comment, as `org-open-at-point'.
         ((and org-return-follows-link
               (or (and (eq 'link (org-element-type context))
                        ;; Ensure point is not on the white spaces after
                        ;; the link.
                        (let ((origin (point)))
                          (org-with-point-at (org-element-property :end context)
                            (skip-chars-backward " \t")
                            (> (point) origin))))
                   (org-in-regexp org-ts-regexp-both nil t)
                   (org-in-regexp org-tsr-regexp-both nil t)
                   (org-in-regexp org-any-link-re nil t)))
          (call-interactively #'org-open-at-point))
         ;; Insert newline in heading, but preserve tags.
         ((and (not (bolp))
               (let ((case-fold-search nil))
                 (org-match-line org-complex-heading-regexp)))
          ;; At headline.  Split line.  However, if point is on keyword,
          ;; priority cookie or tags, do not break any of them: add
          ;; a newline after the headline instead.
          (let ((tags-column (and (match-beginning 5)
                                  (save-excursion (goto-char (match-beginning 5))
                                                  (current-column))))
                (string
                 (when (and (match-end 4) (org-point-in-group (point) 4))
                   (delete-and-extract-region (point) (match-end 4)))))
            ;; Adjust tag alignment.
            (cond
             ((not (and tags-column string)))
             (org-auto-align-tags (org-align-tags))
             (t (org--align-tags-here tags-column))) ;preserve tags column
            (end-of-line)
            (org-show-entry)
            (if indent (newline-and-indent) (newline))
            (when string (save-excursion (insert (org-trim string))))))
         ;; In a list, make sure indenting keeps trailing text within.
         ((and indent
               (not (eolp))
               (org-element-lineage context '(item)))
          (let ((trailing-data
                 (delete-and-extract-region (point) (line-end-position))))
            (newline-and-indent)
            (save-excursion (insert trailing-data))))
         ((and (eolp) (org-at-item-p))
          (end-of-visible-line)
          (org-insert-item (org-at-item-checkbox-p)))
         (t
          ;; Do not auto-fill when point is in an Org property drawer.
          (let ((auto-fill-function (and (not (org-at-property-p))
                                         auto-fill-function)))
            (if indent
                (newline-and-indent)
              (newline)))))))


    (define-key org-mode-map (kbd "RET")
                'zilong/org-return)


  :init
  ;;  (setq org-id-extra-files (org-roam--list-files org-roam-directory))
  (setq
   org-roam-directory (file-truename centaur-org-directory)
   org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag))
   )
  )



(use-package org-roam-ui
  :after org-roam ;; or :after org
  ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
  ;;         a hookable mode anymore, you're advised to pick something yourself
  ;;         if you don't care about startup time, use
  ;; :hook (after-init . org-roam-ui-mode)
  :config
  (setq org-roam-ui-sync-theme nil
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))

;;============ others ===============
;;(use-package org-ol-tree
;;  :commands org-ol-tree)

(use-package org-appear
  :hook (org-mode . org-appear-mode)
  :config
  (setq org-appear-autoemphasis t
        org-appear-autosubmarkers t
        org-appear-autolinks t)
  )

;; ========= org-modern =========
(use-package org-modern
  :ensure t ;; Â¶ÇÊûú‰Ω†ËøòÊ≤°ÊúâÂÆâË£Ö org-modernÔºåËØ∑Á°Æ‰øù t
  :hook ((org-mode . org-modern-mode)                ;; Âú®ÊâìÂºÄ org Êñá‰ª∂Êó∂ÂêØÁî® org-modern-mode
         (org-mode . global-org-modern-mode)
         (org-agenda-finalize . org-modern-agenda)   ;; ÁæéÂåñ agenda ËßÜÂõæ
         (org-modern-mode . (lambda ()
                              "‰∏∫ org-modern-mode ËøõË°åÈ¢ùÂ§ñË∞ÉÊï¥"
                              ;; Á¶ÅÁî® Emacs ÂÜÖÂª∫ÁöÑ prettify-symbols-modeÔºåÈÅøÂÖç‰∏é org-modern ÂÜ≤Á™Å
                              ;; ËøôÊòØ‰Ω†ÈÖçÁΩÆ‰∏≠Â∑≤ÊúâÁöÑÂ•ΩÂÅöÊ≥ï
                              (setq prettify-symbols-alist nil)
                              (prettify-symbols-mode -1)

                              ;; ----------------------------------------------------
                              ;; ‰ΩøÁî®‰∏çÂêåÁöÑ Unicode Â≠óÁ¨¶‰Ωú‰∏∫Ê†áÈ¢òÊòüÂè∑
                              (setq org-modern-star '("‚óâ" "‚óã" "‚ú∏" "‚úø"))
                              ;; ÊàñËÄÖ‰ΩøÁî®Êõ¥ÁÆÄÁ∫¶ÁöÑÂÆûÂøÉÁÇπ (ÈúÄË¶ÅÂÖºÂÆπÁöÑÂ≠ó‰Ωì)
                              ;;(setq org-modern-star '("‚óè" "‚óã" "‚óÜ" "‚óá"))
                              ;; Â¶ÇÊûúÊÉ≥ÂÆåÂÖ®ÈöêËóèÊòüÂè∑ÔºåÂè™ÈÄöËøáÁº©ËøõÂå∫ÂàÜÂ±ÇÁ∫ß
                              ;; (setq org-modern-hide-stars t)


                              ;; --- Ê†áÁ≠æÊ†∑Âºè ---
                              ;; ‰ΩøÁî®Êõ¥ÊüîÂíåÁöÑÊ†áÁ≠æËÉåÊôØËâ≤ÔºåÊàñËÄÖÂè™ÊîπÂèòÂâçÊôØËâ≤
                              ;; (setq org-modern-tag-faces '((:foreground "dim gray" :weight 'semi-bold)))
                              ;; ÊàñËÄÖÁªôÊ†áÁ≠æÂä†‰∏äËæπÊ°Ü/ËçØ‰∏∏ÂΩ¢Áä∂ (ÈúÄË¶Å‰∏ªÈ¢òÊàñÈ¢ùÂ§ñ face ÂÆö‰πâÊîØÊåÅËâØÂ•Ω)
                              ;; (setq org-modern-tag-faces '((:box (:line-width (-1 . -1) :color "gray" :style nil) :foreground "dim gray")))

                              ;; --- ÂàóË°®È°πÁõÆÁ¨¶Âè∑ ---
                              ;; Ëá™ÂÆö‰πâÊó†Â∫èÂàóË°®ÁöÑÈ°πÁõÆÁ¨¶Âè∑
                              (setq org-modern-list '((43 . "¬∑ ")  ; + (plus)
                                                      (45 . "‚Äì ")  ; - (hyphen)
                                                      (42 . "‚Ä¢ "))) ; * (asterisk)

                              (setq org-modern-horizontal-rule "‚îà‚îà‚îà‚îà‚îà‚îà") ;; ËôöÁ∫ø

                              ;; --- Ë°®Ê†º ---
                              ;; ÂêØÁî®Êõ¥Áé∞‰ª£ÁöÑË°®Ê†ºÊ∏≤Êüì (‰ΩøÁî® box-drawing Â≠óÁ¨¶)
                              (setq org-modern-table 'modern)

                              ;; --- ÂÖÉÊï∞ÊçÆË°å (Â¶Ç #+TITLE, #+AUTHOR) ---
                              (setq org-modern-keyword-foreground "DarkGoldenrod") ;; ÊîπÂèòÂÖÉÊï∞ÊçÆÂÖ≥ÈîÆÂ≠óÁöÑÈ¢úËâ≤
                              (setq org-modern-meta-line-padding 1) ;; Â¢ûÂä†ÂÖÉÊï∞ÊçÆË°å‰∏äÊñπÁöÑÂ°´ÂÖÖ

                              ;; --- Êó•Á®ãÂíåÊó∂Èíü ---
                              (setq org-modern-agenda-time-grid-custom-colors t) ;; ÂÖÅËÆ∏agendaÊó∂Èó¥ÁΩëÊ†º‰ΩøÁî®Ëá™ÂÆö‰πâÈ¢úËâ≤

                              )))
  :config
  ;; ÈªòËÆ§ÊÉÖÂÜµ‰∏ãÔºåorg-modern Â∑≤ÁªèÊúâÂæàÂ§ö‰∏çÈîôÁöÑËÆæÁΩÆ‰∫Ü„ÄÇ
  ;; :config ÂùóÂèØ‰ª•ÁïôÁ©∫ÔºåÊàñËÄÖÊîæ‰∏Ä‰∫õ‰∏çÈÄÇÂêàÂú® hook lambda ‰∏≠ËÆæÁΩÆÁöÑÂèòÈáèÔºàÊØîÂ¶ÇÂè™ËÆæÁΩÆ‰∏ÄÊ¨°ÁöÑÔºâ
  ;; ‰æãÂ¶ÇÔºåÂ¶ÇÊûú‰Ω†ÊÉ≥ÂÖ®Â±Ä‰øÆÊîπ‰∏Ä‰∫õ org-modern Ëá™Ë∫´Êèê‰æõÁöÑ face (ËôΩÁÑ∂ÈÄöÂ∏∏Áî±‰∏ªÈ¢òÂ§ÑÁêÜ)
  ;; (custom-set-faces
  ;;  '(org-modern-tag ((t (:foreground "blue" :weight 'bold)))))
  (setq org-modern-todo t) ; ÂêØÁî® TODO ÂÖ≥ÈîÆÂ≠óÁöÑÁé∞‰ª£ÂåñÊòæÁ§∫
  (setq org-modern-priority t) ; ÂêØÁî®‰ºòÂÖàÁ∫ßÁöÑÁé∞‰ª£ÂåñÊòæÁ§∫ (‰æãÂ¶Ç [#A] -> ‚í∂)
  )


(use-package valign
  :ensure t
  :hook ((org-mode) . valign-mode))


(provide 'init-org)
